name: 'Quick K8s'
description: 'Quickly deploy a k8s cluster on Github Actions hosted runners'
branding:
  icon: 'box'
  color: 'blue'
inputs:
  apiServerPort:
    description: 'The port to use for the Kubernetes API server'
    required: false
    default: '6443'
  apiServerAddress:
    description: 'The address to use for the Kubernetes API server'
    required: false
    default: '0.0.0.0'
  disableDefaultCni:
    description: 'Disable the default CNI plugin'
    required: false
    default: 'true'
  ipFamily:
    description: 'The IP family to use for the Kubernetes API server'
    required: false
    default: 'dual'
  defaultNodeImage:
    description: 'The default node image to use for the Kubernetes cluster'
    required: false
    default: 'kindest/node:v1.32.2@sha256:f226345927d7e348497136874b6d207e0b32cc52154ad8323129352923a3142f'
  numControlPlaneNodes:
    description: 'The number of control plane nodes to use for the Kubernetes cluster'
    required: false
    default: '1'
  numWorkerNodes:
    description: 'The number of worker nodes to use for the Kubernetes cluster'
    required: false
    default: '1'
  kindVersion:
    description: 'The version of KinD to use'
    required: false
    default: 'v0.27.0'
  calicoVersion:
    description: 'The version of Calico to use'
    required: false
    default: 'v3.29.3'
  ocpReleaseLevel:
    description: 'The release level of OpenShift to use'
    required: false
    default: '4.17'
  installOLM:
    description: 'Install the Operator Lifecycle Manager'
    required: false
    default: 'false'
  removeDefaultStorageClass:
    description: 'Remove the default storage class'
    required: false
    default: 'false'
  removeControlPlaneTaint:
    description: 'Remove the control plane taint'
    required: false
    default: 'false'
  waitForPodsReady:
    description: 'Wait for all pods to be ready'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Validate KinD version input
      shell: bash
      run: |
        if ! [[ "${{ inputs.kindVersion }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid KinD version format: ${{ inputs.kindVersion }}"
          exit 1
        fi
        if ! curl --silent --fail https://github.com/kubernetes-sigs/kind/releases/tag/${{ inputs.kindVersion }} > /dev/null; then
          echo "KinD version ${{ inputs.kindVersion }} does not exist on GitHub"
          exit 1
        fi

    - name: Validate Calico version input
      shell: bash
      run: |
        if ! [[ "${{ inputs.calicoVersion }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid Calico version format: ${{ inputs.calicoVersion }}"
          exit 1
        fi
        if ! curl --silent --fail https://github.com/projectcalico/calico/releases/tag/${{ inputs.calicoVersion }} > /dev/null; then
          echo "Calico version ${{ inputs.calicoVersion }} does not exist on GitHub"
          exit 1
        fi

    - name: Validate OpenShift release level input
      shell: bash
      run: |
        if ! [[ "${{ inputs.ocpReleaseLevel }}" =~ ^[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid OpenShift release level format: ${{ inputs.ocpReleaseLevel }}"
          exit 1
        fi

    - name: Validate number of control-plane nodes
      shell: bash
      run: |
        if [[ "${{ inputs.numControlPlaneNodes }}" -lt 1 ]]; then
          echo "The number of control-plane nodes cannot be less than 1."
          exit 1
        fi

    - name: Validate number of worker nodes
      shell: bash
      run: |
        if [[ "${{ inputs.numWorkerNodes }}" -lt 0 ]]; then
          echo "The number of worker nodes cannot be negative."
          exit 1
        fi

    - name: Write temporary docker file (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        mkdir -p /home/runner/.docker
        touch /home/runner/.docker/config

    - name: Setup Docker on Mac
      if: ${{ runner.os == 'macOS' }}
      uses: douglascamata/setup-docker-macos-action@v1-alpha

    # Based on the environment, we need to install the correct version of KinD
    - name: Install KinD for Linux AMD64
      if: ${{ runner.os == 'Linux' && runner.arch == 'x64' }}
      shell: bash
      run: |
        echo "Downloading the latest KinD binary..."
        curl -Lo kind https://kind.sigs.k8s.io/dl/$KIND_VERSION/kind-linux-amd64
        chmod +x kind
        sudo mv kind /usr/local/bin/
      env:
        KIND_VERSION: ${{ inputs.kindVersion }}

    - name: Install KinD for Linux ARM64
      if: ${{ runner.os == 'Linux' && runner.arch == 'arm64' }}
      shell: bash
      run: |
        curl -Lo kind https://kind.sigs.k8s.io/dl/$KIND_VERSION/kind-linux-arm64
        chmod +x kind
        sudo mv kind /usr/local/bin/
      env:
        KIND_VERSION: ${{ inputs.kindVersion }}

    - name: Install KinD for MacOS
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
        brew install kind

    - name: Add error handling for KinD installation
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        if ! command -v kind &> /dev/null; then
          echo "KinD installation failed. Exiting."
          exit 1
        fi

    # Create a new Kubernetes cluster using KinD
    - name: Populate temporary config file for KinD
      shell: bash
      run: ${{ github.action_path }}/scripts/generate-kind-config.sh ${{ inputs.apiServerPort }} ${{ inputs.apiServerAddress }} ${{ inputs.disableDefaultCni }} ${{ inputs.ipFamily }} ${{ inputs.defaultNodeImage }} ${{ inputs.numControlPlaneNodes }} ${{ inputs.numWorkerNodes }} ${{ github.action_path }}/kind-config.yaml

    - name: Print the KinD config
      shell: bash
      run: cat ${{ github.action_path }}/kind-config.yaml

    - name: Bootstrap the docker instance on the runner (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: ${{ github.action_path }}/scripts/bootstrap-docker.sh

    - name: Create a new Kubernetes cluster using KinD
      shell: bash
      run: kind create cluster --config ${{ github.action_path }}/kind-config.yaml

    # - name: Bootstrap the runner with kubectl and oc clients
    - name: Bootstrap the runner with kubectl and oc clients
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        sudo ${{ github.action_path }}/scripts/install-oc-tools.sh --latest ${{ inputs.ocpReleaseLevel }}

    - name: Install oc client on MacOS
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
        brew install openshift-cli

    - name: Install calico CNI if default CNI is disabled
      if: ${{ inputs.disableDefaultCni == 'true' }}
      shell: bash
      run: |
        oc apply -f https://raw.githubusercontent.com/projectcalico/calico/$CALICO_VERSION/manifests/calico.yaml;
      env:
        CALICO_VERSION: ${{ inputs.calicoVersion }}

    - name: Install OLM
      if: ${{ inputs.installOLM == 'true' }}
      shell: bash
      run: ${{ github.action_path }}/scripts/install-olm.sh

    - name: Remove the default storage class
      if: ${{ inputs.removeDefaultStorageClass == 'true' }}
      shell: bash
      run: |
        oc delete storageclass standard --ignore-not-found

    - name: Remove the control plane taint
      if: ${{ inputs.removeControlPlaneTaint == 'true' }}
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/remove-control-plane-taint.sh

    - name: Wait for all pods to be ready
      if: ${{ inputs.waitForPodsReady == 'true' }}
      shell: bash
      run: ${{ github.action_path }}/scripts/wait-for-pods.sh
